AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Real-Time Environmental Disaster Waste Tracking System - Complete
Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        INCIDENTS_TABLE:
          Ref: IncidentsTable
        COORDINATION_TABLE:
          Ref: CoordinationTable
        TEAMS_TABLE:
          Ref: TeamsTable
        ALERTS_TABLE:
          Ref: AlertsTable
Resources:
  WasteClassifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: WasteClassifierFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IncidentsTable
      - EventBridgePutEventsPolicy:
          EventBusName: default
      Events:
        ClassifyWaste:
          Type: Api
          Properties:
            Path: /classify
            Method: post
    Metadata:
      SamResourceId: WasteClassifierFunction
  CrossBorderCoordinatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CrossBorderCoordinatorFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CoordinationTable
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Ref: CoordinationWorkflow
      Events:
        CoordinationTrigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
              - disaster.waste.tracker
              detail-type:
              - Cross-Border Incident Detected
    Metadata:
      SamResourceId: CrossBorderCoordinatorFunction
  LocationProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LocationProcessorFunction
      Handler: app.lambda_handler
      Events:
        ProcessLocation:
          Type: Api
          Properties:
            Path: /location/process
            Method: post
    Metadata:
      SamResourceId: LocationProcessorFunction
  AlertGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AlertGeneratorFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: AlertsTable
      - SNSPublishMessagePolicy:
          TopicName:
            Ref: EmergencyAlerts
      Events:
        GenerateAlert:
          Type: Api
          Properties:
            Path: /alerts/generate
            Method: post
    Metadata:
      SamResourceId: AlertGeneratorFunction
  ResourceOptimizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ResourceOptimizerFunction
      Handler: app.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TeamsTable
      Events:
        OptimizeResources:
          Type: Api
          Properties:
            Path: /resources/optimize
            Method: post
    Metadata:
      SamResourceId: ResourceOptimizerFunction
  IncidentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DisasterIncidents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: incident_id
        AttributeType: S
      KeySchema:
      - AttributeName: incident_id
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  CoordinationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CrossBorderCoordination
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: coordination_id
        AttributeType: S
      KeySchema:
      - AttributeName: coordination_id
        KeyType: HASH
  TeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ResponseTeams
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: team_id
        AttributeType: S
      KeySchema:
      - AttributeName: team_id
        KeyType: HASH
  AlertsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AlertActivity
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: incident_id
        AttributeType: S
      KeySchema:
      - AttributeName: incident_id
        KeyType: HASH
  CoordinationWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: DisasterCoordinationWorkflow
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Cross-Border Disaster Coordination Workflow\"\
          ,\n  \"StartAt\": \"ValidateIncident\",\n  \"States\": {\n    \"ValidateIncident\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${CrossBorderCoordinatorFunction.Arn}\"\
          ,\n      \"Next\": \"CheckPriority\"\n    },\n    \"CheckPriority\": {\n\
          \      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n        \
          \  \"Variable\": \"$.priority\",\n          \"StringEquals\": \"CRITICAL\"\
          ,\n          \"Next\": \"CriticalResponse\"\n        },\n        {\n   \
          \       \"Variable\": \"$.priority\",\n          \"StringEquals\": \"HIGH\"\
          ,\n          \"Next\": \"HighPriorityResponse\"\n        }\n      ],\n \
          \     \"Default\": \"StandardResponse\"\n    },\n    \"CriticalResponse\"\
          : {\n      \"Type\": \"Parallel\",\n      \"Branches\": [\n        {\n \
          \         \"StartAt\": \"ImmediateAlert\",\n          \"States\": {\n  \
          \          \"ImmediateAlert\": {\n              \"Type\": \"Task\",\n  \
          \            \"Resource\": \"${AlertGeneratorFunction.Arn}\",\n        \
          \      \"End\": true\n            }\n          }\n        },\n        {\n\
          \          \"StartAt\": \"ResourceAllocation\",\n          \"States\": {\n\
          \            \"ResourceAllocation\": {\n              \"Type\": \"Task\"\
          ,\n              \"Resource\": \"${ResourceOptimizerFunction.Arn}\",\n \
          \             \"End\": true\n            }\n          }\n        }\n   \
          \   ],\n      \"Next\": \"CoordinationComplete\"\n    },\n    \"HighPriorityResponse\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${AlertGeneratorFunction.Arn}\"\
          ,\n      \"Next\": \"ResourceAllocation\"\n    },\n    \"StandardResponse\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${AlertGeneratorFunction.Arn}\"\
          ,\n      \"Next\": \"CoordinationComplete\"\n    },\n    \"ResourceAllocation\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ResourceOptimizerFunction.Arn}\"\
          ,\n      \"Next\": \"CoordinationComplete\"\n    },\n    \"CoordinationComplete\"\
          : {\n      \"Type\": \"Succeed\"\n    }\n  }\n}\n"
      RoleArn:
        Fn::GetAtt:
        - StepFunctionsRole
        - Arn
  EmergencyAlerts:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DisasterWasteTrackerAlerts
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: StepFunctionsExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - WasteClassifierFunction
              - Arn
            - Fn::GetAtt:
              - CrossBorderCoordinatorFunction
              - Arn
            - Fn::GetAtt:
              - LocationProcessorFunction
              - Arn
            - Fn::GetAtt:
              - AlertGeneratorFunction
              - Arn
            - Fn::GetAtt:
              - ResourceOptimizerFunction
              - Arn
Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  CoordinationWorkflowArn:
    Description: Step Functions workflow ARN
    Value:
      Ref: CoordinationWorkflow
  IncidentsTableName:
    Description: DynamoDB Incidents table name
    Value:
      Ref: IncidentsTable
